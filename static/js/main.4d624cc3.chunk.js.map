{"version":3,"sources":["views/Dashboard.module.css","components/Dashboard/LineGraph.module.css","components/Autocomplete.js","components/Marker.js","components/MyGoogleMap.js","components/Dashboard/LineGraph.js","components/Conditions.js","views/Dashboard.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Wrapper","styled","div","AutoComplete","props","onPlaceChanged","map","addplace","place","autoComplete","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","bind","this","mapApi","options","types","places","Autocomplete","addListener","bindTo","event","clearInstanceListeners","value","className","ref","type","onFocus","placeholder","Component","Marker","text","onClick","alt","defaultProps","myLineChart","main","MyGoogleMap","state","mapApiLoaded","mapInstance","geoCoder","center","zoom","address","draggable","lat","lng","onMarkerInteraction","childKey","childProps","mouse","setState","onMarkerInteractionMouseUp","_generateAddress","_onChange","_onClick","apiHasLoaded","maps","addPlace","setCurrentLocation","Geocoder","geocode","results","status","console","log","formatted_address","window","alert","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","onChange","onChildMouseDown","onChildMouseUp","onChildMouseMove","onChildClick","bootstrapURLKeys","key","libraries","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","conditions","responseObj","cod","name","Math","round","temp","weather","description","LineGraph","chartRef","React","createRef","buildChart","myChartRef","current","getContext","gradientFill","document","getElementById","createLinearGradient","addColorStop","destroy","Chart","data","labels","days","datasets","label","temp_data","fill","borderColor","backgroundColor","responsive","maintainAspectRatio","classes","graphContainer","id","Dashboard","container","Forecast","useState","city","setCity","unit","setUnit","setlat","lon","setlon","setResponseObj","uriEncodedCity","encodeURIComponent","onSubmit","e","preventDefault","fetch","method","headers","then","response","json","catch","err","error","k","list","push","max","get16Forecast","maxLength","target","for","checked","Conditions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4d624cc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dashboard_container__1TeWx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphContainer\":\"LineGraph_graphContainer__3LzMf\"};","// Autocomplete.js\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n`;\n\nclass AutoComplete extends Component {\n  constructor(props) {\n    super(props);\n    this.clearSearchBox = this.clearSearchBox.bind(this);\n  }\n\n  componentDidMount({ map, mapApi } = this.props) {\n    const options = {\n      // restrict your search to a specific type of result\n      types: [\"address\"]\n      // restrict your search to a specific country, or an array of countries\n      // componentRestrictions: { country: ['gb', 'us'] },\n    };\n    this.autoComplete = new mapApi.places.Autocomplete(\n      this.searchInput,\n      options\n    );\n    this.autoComplete.addListener(\"place_changed\", this.onPlaceChanged);\n    this.autoComplete.bindTo(\"bounds\", map);\n  }\n\n  componentWillUnmount({ mapApi } = this.props) {\n    mapApi.event.clearInstanceListeners(this.searchInput);\n  }\n\n  onPlaceChanged = ({ map, addplace } = this.props) => {\n    const place = this.autoComplete.getPlace();\n\n    if (!place.geometry) return;\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport);\n    } else {\n      map.setCenter(place.geometry.location);\n      map.setZoom(17);\n    }\n\n    addplace(place);\n    this.searchInput.blur();\n  };\n\n  clearSearchBox() {\n    this.searchInput.value = \"\";\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <input\n          className=\"search-input\"\n          ref={ref => {\n            this.searchInput = ref;\n          }}\n          type=\"text\"\n          onFocus={this.clearSearchBox}\n          placeholder=\"Enter a location\"\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default AutoComplete;\n","// Marker.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: absolute;\n  width: 38px;\n  height: 37px;\n  background-image: url(https://icon-library.com/images/pin-icon-png/pin-icon-png-9.jpg);\n  background-size: contain;\n  background-repeat: no-repeat;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -webkit-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  cursor: grab;\n`;\n\nconst Marker = ({ text, onClick }) => <Wrapper alt={text} onClick={onClick} />;\n\nMarker.defaultProps = {\n  onClick: null\n};\n\nMarker.propTypes = {\n  onClick: PropTypes.func,\n  text: PropTypes.string.isRequired\n};\n\nexport default Marker;\n","// MyGoogleMaps.js\n\n/* The google maps API was a HUGE pain in the ass to get working. It can be implemeted\nusing a simple version of the API but it doesn't yield much information that way. \nEX:\nThis would yield our simple google map api with very little information. \n\nlet map;\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: { lat: -34.397, lng: 150.644 },\n    zoom: 8,\n  });\n}\n\nSo instead I followed a tutorial which makes use of several api's working consecutively \nwith the goolge map API. The following code will make use of the \"Places, Geocoder, Maps Javascript, \nMaps Embeded, and Geolocation\" APIS to give us a google map with a moveable marker, longitude and\nlatitude location, and an address with a city, state, country, and zipcode. \n\nTutorial Link: https://www.freakyjolly.com/google-maps-in-react-example-application/#.X8HHnRNKhJV\n\n*/\nimport React, { Component } from \"react\";\n\nimport GoogleMapReact from \"google-map-react\";\n\nimport styled from \"styled-components\";\n\nimport AutoComplete from \"./Autocomplete\";\nimport Marker from \"./Marker\";\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nclass MyGoogleMap extends Component {\n  state = {\n    mapApiLoaded: false,\n    mapInstance: null,\n    mapApi: null,\n    geoCoder: null,\n    places: [],\n    center: [],\n    zoom: 9,\n    address: \"\",\n    draggable: true,\n    lat: null,\n    lng: null\n  };\n\n  componentWillMount() {\n    this.setCurrentLocation();\n  }\n\n  onMarkerInteraction = (childKey, childProps, mouse) => {\n    this.setState({\n      draggable: false,\n      lat: mouse.lat,\n      lng: mouse.lng\n    });\n  };\n  onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\n    this.setState({ draggable: true });\n    this._generateAddress();\n  };\n\n  _onChange = ({ center, zoom }) => {\n    this.setState({\n      center: center,\n      zoom: zoom\n    });\n  };\n\n  _onClick = value => {\n    this.setState({\n      lat: value.lat,\n      lng: value.lng\n    });\n  };\n\n  apiHasLoaded = (map, maps) => {\n    this.setState({\n      mapApiLoaded: true,\n      mapInstance: map,\n      mapApi: maps\n    });\n\n    this._generateAddress();\n  };\n\n  /* Tried to get marker placements to be persistent. Ran out of time. \n  markers = [];\n  _addMarkersToMap = place => {\n    if (!place.geometry) {\n      console.log(\"Returned place contains no geometry\");\n      return;\n    }\n    const icon = {\n      url: place.icon,\n      size: new google.maps.Size(71, 71),\n      origin: new google.maps.Point(0, 0),\n      anchor: new google.maps.Point(17, 34),\n      scaledSize: new google.maps.Size(25, 25)\n    };\n\n    markers.push(\n      new google.maps.Marker({\n        mapInstance,\n        icon,\n        title: place.name,\n        position: place.geometry.location\n      })\n    );\n  };\n*/\n  addPlace = place => {\n    this.setState({\n      places: [place],\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng()\n    });\n    //this._addMarkersToMap(); //call our add marker function.\n    this._generateAddress();\n  };\n\n  _generateAddress() {\n    const { mapApi } = this.state;\n\n    const geocoder = new mapApi.Geocoder();\n\n    geocoder.geocode(\n      { location: { lat: this.state.lat, lng: this.state.lng } },\n      (results, status) => {\n        console.log(results);\n        console.log(status);\n        if (status === \"OK\") {\n          if (results[0]) {\n            this.zoom = 12;\n            this.setState({ address: results[0].formatted_address });\n          } else {\n            window.alert(\"No results found\");\n          }\n        } else {\n          window.alert(\"Geocoder failed due to: \" + status);\n        }\n      }\n    );\n  }\n\n  // Get Current Location Coordinates\n  setCurrentLocation() {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          center: [position.coords.latitude, position.coords.longitude],\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  }\n\n  render() {\n    const { places, mapApiLoaded, mapInstance, mapApi } = this.state;\n\n    return (\n      <Wrapper>\n        {mapApiLoaded && (\n          <div>\n            <AutoComplete //generates our map.\n              map={mapInstance}\n              mapApi={mapApi}\n              addplace={this.addPlace}\n            />\n          </div>\n        )}\n        <GoogleMapReact\n          center={this.state.center}\n          zoom={this.state.zoom}\n          draggable={this.state.draggable}\n          onChange={this._onChange}\n          onChildMouseDown={this.onMarkerInteraction}\n          onChildMouseUp={this.onMarkerInteractionMouseUp}\n          onChildMouseMove={this.onMarkerInteraction}\n          onChildClick={() => console.log(\"child click\")}\n          onClick={this._onClick}\n          bootstrapURLKeys={{\n            key: \"AIzaSyBbgQMlI3WkrNhWsJkgm9BSBylz2e9XyH4\",\n            libraries: [\"places\", \"geometry\"]\n          }}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\n        >\n          <Marker\n            text={this.state.address}\n            lat={this.state.lat}\n            lng={this.state.lng}\n          />\n        </GoogleMapReact>\n\n        <div className=\"info-wrapper\">\n          <div className=\"map-details\">\n            Latitude: <span>{this.state.lat}</span>, Longitude:{\" \"}\n            <span>{this.state.lng}</span>\n          </div>\n          <div className=\"map-details\">\n            Zoom: <span>{this.state.zoom}</span>\n          </div>\n          <div className=\"map-details\">\n            Address: <span>{this.state.address}</span>\n          </div>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default MyGoogleMap;\n","import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\nimport { temp_data, days } from \"../Forecast\";\nlet myLineChart;\n\nexport default class LineGraph extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    this.buildChart();\n  }\n  componentDidUpdate() {\n    this.buildChart();\n  }\n\n  buildChart = () => {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    //const { temp_data, days } = this.props;\n\n    var ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n    var gradientFill = ctx.createLinearGradient(500, 0, 100, 0);\n    gradientFill.addColorStop(0, \"rgba(128, 182, 244, 0.6\");\n    gradientFill.addColorStop(1, \"rgba(244, 144, 128, 0.6\");\n    if (typeof myLineChart !== \"undefined\") myLineChart.destroy(); //destroy old chart and build new one.\n    //console.log(temp_data);\n    myLineChart = new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: days, //[0,1,...6]  7 days of the week.\n        datasets: [\n          {\n            label: \"temperature\",\n            data: temp_data, //[53.12, 53.1,...]  max temp of each day of the week.\n            fill: true,\n            borderColor: \"#98B9AB\",\n            backgroundColor: gradientFill\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n    console.log(temp_data);\n  };\n  render() {\n    return (\n      <div className={classes.graphContainer}>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst conditions = props => {\n  //accessing the data from the responseObj inside of \"props\".\n  return (\n    <div>\n      {props.responseObj.cod === 200 ? (\n        <div>\n          <p>\n            <strong>{props.responseObj.name}</strong>\n          </p>\n          <p>\n            It is currently {Math.round(props.responseObj.main.temp)} degrees\n            out with {props.responseObj.weather[0].description}\n          </p>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default conditions;\n","import React, { Component } from \"react\";\nimport classes from \"../views/Dashboard.module.css\";\nimport LineGraph from \"../components/Dashboard/LineGraph\";\nimport { temp_data, days } from \"../components/Forecast\";\n\nexport default class Dashboard extends Component {\n  state = {\n    data: temp_data,\n    labels: days\n  };\n\n  render() {\n    const { data, labels } = this.state;\n    return (\n      <div className={classes.container}>\n        <header>\n          <h1>Max Temperature Dashboard</h1>\n        </header>\n        <LineGraph data={data} labels={labels} />\n      </div>\n    );\n  }\n}\n","/* I followed the following tutorial to get the OpenWeatherMap API to work. \nTutorial Links: \nhttps://rapidapi.com/blog/weather-app-react/\nhttps://rapidapi.com/community/api/open-weather-map/endpoints \n\nAPI being used: https://openweathermap.org/ \n*/\n\nimport React, { useState } from \"react\";\nimport Conditions from \"../components/Conditions\";\nimport Dashboard from \"../views/Dashboard\"; //call dashboard.\n\nvar temp_data = [];\nconst Forecast = () => {\n  let [city, setCity] = useState(\"\"); //city input will need to be URI encoded.\n  let [unit, setUnit] = useState(\"imperial\"); //setting intial value to imperial as default.\n  let [lat, setlat] = useState(\"\"); //latitude input.\n  let [lon, setlon] = useState(\"\"); //longitude input.\n  let [responseObj, setResponseObj] = useState({}); //creating the responseObj variable.\n  const uriEncodedCity = encodeURIComponent(city); //URI encode our city.\n\n  function getForecast(e) {\n    e.preventDefault();\n    fetch(\n      `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}&lat=${lat}&lon=${lon}`, //using template literal\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-key\":\n            \"37e6f098d2mshdce7d369004075dp158e7djsn8d58d22f8a6f\",\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n        }\n      }\n    )\n      .then(response => response.json()) //convert response into a json object.\n      .then(response => {\n        //assign the response value to the responseobj variable in our state.\n        setResponseObj(response);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n    get16Forecast(e); //call get16Forecast to set dashboard.\n  }\n\n  function get16Forecast(e) {\n    //get 16 day forecast and use for dashboard.\n    e.preventDefault();\n    fetch(\n      `https://community-open-weather-map.p.rapidapi.com/forecast/daily?q=${uriEncodedCity}&lat=${lat}&lon=${lon}&units=${unit}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-key\":\n            \"37e6f098d2mshdce7d369004075dp158e7djsn8d58d22f8a6f\",\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n        }\n      }\n    )\n      .then(response => response.json()) //convert response into a json object.\n      .then(response => {\n        //assign the response value to the responseobj variable in our state.\n        if (temp_data) {\n          temp_data = []; //reset data for chart.\n        }\n        console.log(response);\n        for (var k in response.list) {\n          temp_data.push(response.list[k].temp.max);\n        }\n        //console.log(max_temps);\n        //console.log(min_temps);\n        //console.log(days);\n        console.log(temp_data);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  return (\n    <div>\n      <h2>Find Weather Conditions</h2>\n      <form onSubmit={getForecast}>\n        <input\n          type=\"text\"\n          id=\"city\"\n          placeholder=\"Enter City\"\n          maxLength=\"50\"\n          value={city}\n          onChange={e => setCity(e.target.value)}\n        />\n        <label for=\"city\"></label>\n        <input\n          type=\"text\"\n          id=\"lat\"\n          placeholder=\"Latitude\"\n          maxLength=\"50\"\n          value={lat}\n          onChange={e => setlat(e.target.value)}\n        />\n        <label for=\"lat\"></label>\n        <input\n          type=\"text\"\n          id=\"lon\"\n          placeholder=\"Longitude\"\n          maxLength=\"50\"\n          value={lon}\n          onChange={e => setlon(e.target.value)}\n        />\n        <label for=\"lon\"></label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"imperial\"}\n            value=\"imperial\"\n            onChange={e => setUnit(e.target.value)}\n          />\n          Fahrenheit\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"metric\"}\n            value=\"metric\"\n            onChange={e => setUnit(e.target.value)}\n          />\n          Celcius\n        </label>\n        <button type=\"submit\">Get Forecast</button>\n      </form>\n      <Conditions responseObj={responseObj} />\n      <Dashboard data={temp_data} labels={days} />\n    </div>\n  );\n};\nexport const days = [\n  \"day 1\",\n  \"day 2\",\n  \"day 3\",\n  \"day 4\",\n  \"day 5\",\n  \"day 6\",\n  \"day 7\"\n];\nexport { temp_data };\nexport default Forecast;\n","// App.js\n/* \nAttempted to follow google maps platform \"places search box\" tutorial but couldn't get it to work with a \nreact project. So i went with a different tutorial instead. More information can be found at the top of \nthe \"MyGoogleMap.js\" file. \n\nOriginal Tutorial: https://developers.google.com/maps/documentation/javascript/examples/places-searchbox \n\n*/\n\nimport React from \"react\";\nimport \"./App.css\";\nimport MyGoogleMap from \"./components/MyGoogleMap\";\nimport Forecast from \"./components/Forecast\";\n\nfunction App() {\n  return (\n    <div className=\"main-wrapper\">\n      <Forecast />\n      <MyGoogleMap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}